#!groovy

//node("${NODE_INTEGRATION_TEAM_MGT}") 
node("${NODE_INTEGRATION_TEAM_MGT}") {
    // =================================================================================
    /**
     * TODO: Chi thay doi 3 thong tin tren tuong ung voi project
     *
     * project_name: Name of project
     * kubernetes_namespace: namespace of K8S
     * environment: Special environment (Optional - dev/uat/golive)
     *      dev: 10.1.16.211
     *      uat: 10.1.27.43
     *      golive: generate file deploy on helm-golive repo
     */
    def project_name = "code-with-ai"
    def kubernetes_namespace = "uat-bpm-tttm"
    def environment = "uat"
    // =================================================================================

    def harbor_host
    def helm_host
    def image_version
    def url
    def helm_template_name

    if (environment == "dev") {
        harbor_host = "${harbor_dev}"
        helm_host = "${helm_dev}"
        image_version = "1.0.0"
        helm_template_name = "helm-template-mbbank"
        url = "${helm_deploy_dev}"
    } else if (environment == "uat") {
        harbor_host = "${harbor_uat}"
        helm_host = "${helm_uat}"
        image_version = "1.0.0"
        helm_template_name = "helm-template-mbbank-argocd-prod"
        url = "${helm_deploy_uat}"
    } else if (environment == "golive") {
        harbor_host = "${harbor_uat}"
        helm_host = "${helm_golive}"
        image_version = "1.1.${BUILD_NUMBER}"
        helm_template_name = "helm-template-mbbank-live"
    }

    def docker_prefix = "${harbor_host}/${kubernetes_namespace}"

    stage('1.Clone repository') {
        checkout scm
    }

    stage('2.NPM build') {
            sh "npm cache clean --force"
            sh "npm cache verify"
		    sh "npm install"
            sh "node node_modules/@angular/cli/bin/ng build --prod --base-href=/view/ --deploy-url=/view/  --aot --configuration uat"
		}

    stage('3.Build image') {
        app = docker.build("${docker_prefix}/${project_name}:${image_version}", "-f ./cicd/$environment/Dockerfile .")
    }

    stage('4. Push image') {
        docker.withRegistry("http://${harbor_host}/", 'harbor-private-registry') {
            app.push()
            sh "docker image rm ${docker_prefix}/${project_name}:${image_version}"
        }
    }

    stage('5.Push to Helm') {
        sh "/usr/local/bin/helm repo update"
        sh "/usr/local/bin/helm fetch nexusrepo/${helm_template_name} --version 0.1.0"
        sh "tar -xvf ${helm_template_name}-0.1.0.tgz"
        sh "/usr/local/bin/helm create ${project_name}"
        sh "rm -rf ${project_name}/templates/"
        sh "yes | cp -rf ${helm_template_name}/templates/ ${project_name}/"
        sh "yes | cp -rf cicd/${environment}/deploy-k8s/values.yaml ${project_name}/"
        sh "sed -i 's/enabled: false/enabled: true/g' ${helm_template_name}/values_common.yaml"
        sh "sed -i 's/ID_USER/101/g' ${helm_template_name}/values_common.yaml"
        sh "yes | cp -rf cicd/${environment}/deploy-k8s/values.yaml ${project_name}/"
        sh "cat ${helm_template_name}/values_common.yaml >> ${project_name}/values.yaml"
        sh "yes | cp cicd/${environment}/configmap-k8s/* ${project_name}/"
        sh "sed -i 's|image_version|$docker_prefix/${project_name}|g' ${project_name}/values.yaml"
        sh "sed -i 's|image_tag|${image_version}|g' ${project_name}/values.yaml"
        sh "sed -i 's/H1/H305${BUILD_NUMBER}/g' ${project_name}/values.yaml"
        sh "/usr/local/bin/helm template ${project_name}/ > ${project_name}/deploy-${project_name}.yaml "
        sh "tar -cvzf ${project_name}-${image_version}.tgz ${project_name}/"
        sh "curl -u ${user_helm_nexus}:${password_helm_nexus} http://devci.mbbank.com.vn:8447/repository/${helm_host}/ --upload-file ${project_name}-${image_version}.tgz"
        sh "rm -rf ${project_name}-${image_version}.tgz"
    }

    stage('6.Deploy to K8s') {
        if (environment == "dev" || environment == "uat") {
            build job: "${url}", parameters: [string(name: 'ProjectName', value: "${project_name}"),
                                              string(name: 'ImageVersion', value: "${image_version}"),
                                              string(name: 'KubernetesNamespace', value: "$kubernetes_namespace")]
        } else if (environment == "golive") {
            echo "Non CD"
        }
    }
}
